from typing import Any, Dict, Tuple
import numpy as np
from rnet import *
__all__ = __doc__

class Linear:
    weight: np.ndarray
    bias: np.ndarray
    is_bias: bool
    trainable: bool
    shape: Tuple[int, int]

    def __init__(self, in_features : int, out_features : int, is_bias : bool =True, trainable: bool = True)->None:...
    def forward(self, x : np.ndarray)-> np.ndarray:...
    def backward(self, x : np.ndarray, dy : np.ndarray)-> np.ndarray:...
    def update(self, x : np.ndarray, dy : np.ndarray, lr : float)-> np.ndarray:...
    def parameters(self) -> Dict[str, Any]:...
    def __call__(self, value: np.ndarray) -> np.ndarray:...
    def __str__(self) -> str:...
    def __repr__(self) -> str:...
    def __call__(self, x : np.ndarray)-> np.ndarray:...
    def __getattribute__(self, name: str) -> np.any:
        pass

